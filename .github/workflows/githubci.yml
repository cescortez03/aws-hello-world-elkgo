name: CI/CD
on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

jobs:
  pr_validation:
    if: github.event_name == 'pull_request'
    name: "pr"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: pr
        run: |
          echo "Running pr..."
          echo "Build microservice, ie: docker build... Dockerfile"
          echo "Run linting and static analyzers against previous docker image."

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: "release"
    permissions:
      contents: write
      pages: write
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with: 
          fetch-depth: 0
      - name: tag_release
        run: |
          set -x
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          NEW_TAG=$(echo $LATEST_TAG | awk -F. '{ printf("%s.%s.%s", $1, $2, $3+1) }')
          git config --global user.name "SAGithubActions"
          git config --global user.email "sa.actions@github.com"
          git tag $NEW_TAG
          git push origin $NEW_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-west-2
      - name: build
        run: |
          aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin 925526501192.dkr.ecr.us-west-2.amazonaws.com
          docker build -t helloworld-elktgo .
          docker tag helloworld-elktgo:latest 925526501192.dkr.ecr.us-west-2.amazonaws.com/helloworld-elktgo:latest
          docker push 925526501192.dkr.ecr.us-west-2.amazonaws.com/helloworld-elktgo:latest
  deploy_sandbox:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: "deploy-sandbox-us-west-2"
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: deploy-sandbox
        run: |
          echo "Running Deploy Sandbox..."
  deploy_prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: "deploy-prod-us-west-2"
    runs-on: ubuntu-latest
    needs: deploy_sandbox
    env:
      S3_BUCKET_TF_STATE: "terraform-state-925526501192-us-west-2"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 
          aws-region: us-west-2
      - name: terraform-setup
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.12.0
      - name: terraform-init
        id: init
        run: terraform -chdir=deploy/terraform init -backend-config="bucket=$S3_BUCKET_TF_STATE"
        continue-on-error: false
      - name: terraform-plan
        id: plan
        run: terraform -chdir=deploy/terraform plan
        continue-on-error: false
      - name: terraform-apply
        id: apply
        run: terraform -chdir=deploy/terraform apply -auto-approve
        continue-on-error: false


